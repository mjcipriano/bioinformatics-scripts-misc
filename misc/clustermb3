#!/usr/bin/perl -w

# clustermb3 
# run a MrBayes job in MPI mode on a PBS cluster
# 6/2003 SJB

## Usage: clustermb3 <input file> <email address to notify when done>
## email address is optional

##
## IMPORTANT: Make sure nscd is active on all nodes before running this.  
## The program will segfault immediately otherwise, as nscd is necessary 
## for it to run getpwuid() in MPI_INIT() 
##

#
# Set Up
#

#initialize variables

#queue to put job in
$queuename = "workq";

#name and location of MPI mr bayes executable
$pathtoexe = "/usr/local/bio/bin";
$exename = "mb3_mpich";

#find current directory
$curpwd = `pwd`;
chomp($curpwd);


#
# Check for arguments
#

unless (defined(@ARGV)) {
    print "Usage: clustermb3 input file <email address to notify when done>\n";	
    exit;
}


#
# Load and Check NEXUS file
#

unless (-e "$ARGV[0]") {
	print "\tFile $ARGV[0] not found.\n";
	exit;
}

open(CHECKNEX,"< $ARGV[0]");
$checknex1="fail";
$checknex2="fail";
$checknex3="pass";
$checknex4="fail";
$checknex5=0;
while (defined($checkline=<CHECKNEX>)) {
	chomp($checkline);
	if ($checkline =~ /set.*autoc.*yes/i) {
		$checknex1="pass";
	}
	if ($checkline =~ /set.*nowarn.*yes/i) {
		$checknex2="pass";
	}
	if ($checkline =~ /log.*start/i) {
		$checknex3=$checkline;
	}		
	if ($checkline =~ /quit/i) {
		$checknex4="pass";
	}
	if ($checkline =~ /mcmc /i) {
		$checknex5++;
	}
	if ($checkline =~ /sum[pt]/i) {
		$checknex5++;
	}	
}
close(CHECKNEX);

unless ($checknex1 eq "pass" and $checknex2 eq "pass") {
	print "\tMrBayes block must contain \"set autoclose=yes nowarnings=yes\"\n";
	exit;
}

unless ($checknex3 eq "pass") {
	print "\tLogging prohibited on cluster: $checknex3\n";
	exit;
}

unless ($checknex4 eq "pass") {
	print "\tMrBayes block must contain \"quit;\"\n";
	exit;
}

##ensure that our environment is using a mpich implementation, since we're compiled for that
$switcherline = `switcher mpi --show | grep default`;
unless ($switcherline =~ /mpich/){
    die("switcher must be set to use mpich before running clustermb3");
}

#get email address
$emailme = 0;

if(defined($ARGV[1])){
    if( !($ARGV[1] =~ /@/) ){
	die("Second parameter should be an email address\n");
    }
    $emailme = 1;
    $emailaddr = $ARGV[1];
}

## make sure that mcmc, autoclose, nchains all set correctly... won't work right and/or 
## don't need to clusterize it if not using mcmc nchains=x
$nchains = 0;
$hasclose = 0;
$hasmcmc = 0;
$haschains = 0;

open(IN, "<$ARGV[0]");
while(<IN>){

    #make sure we have set autoclose=yes or set autoclose = yes
    if($_ =~ /autoclose.*yes/){
	$hasclose = 1;
    }

    if($_ =~ /mcmc/){
	$hasmcmc = 1;
    }

    #nchains command of type nchains=x (1-999 chains)
    if($_ =~ /nchains=(\d{1,3})/){
	$haschains=1;
	$nchains=$1;
    }
}

unless($hasclose && $hasmcmc && $haschains && ($nchains > 0) ){
    die("Ensure your bayes block contains \"set autoclose=yes\" and a mcmc command with nchains=(number)\n");
}

$scriptname = int(rand(999999));

print "Building and submitting a PBS script for your MrBayes job\n";

#build scripts for each job, submit to PBS

open(SCR, ">${scriptname}.sh");

print SCR "#!/bin/sh\n";
print SCR "#PBS -j oe\n";
print SCR "#PBS -o $ARGV[0].bayesout\n";
print SCR "#PBS -q ${queuename}\n";
print SCR "#PBS -N clustermb3\n";

#allocate one node for each chain (ie, 1 processor).. we have enough 
#procs to do it this way and not by messing with ppn
print SCR "#PBS -l nodes=${nchains}:ppn=2:all\n\n";

if($emailme){
    print SCR "#PBS -m ae\n";
    print SCR "#PBS -M $emailaddr\n";    
}

print SCR "cd ${curpwd}\n";

#set up MPICH variables
print SCR "NP=`(wc -l < \$PBS_NODEFILE) | awk '{print \$1}'`\n";

print SCR "mpirun -np \$NP -machinefile \$PBS_NODEFILE ${pathtoexe}/${exename} $ARGV[0]\n";

#clean up after ourselves... get rid of script and the mb.mpiout.proc_x.p files
print SCR "/bin/rm -f ${curpwd}/${scriptname}.sh\n";
print SCR "/bin/rm -f ${curpwd}/mb.mpiout.proc*\n";
close(SCR);

#submit job
$lastjobid = `qsub ${scriptname}.sh`;

print "MrBayes job submitted to the cluster as job $lastjobid\n";

exit;
